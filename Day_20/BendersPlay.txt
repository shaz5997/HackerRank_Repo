import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;



public class Solution {

    static int n, m;
    static List<List<Integer>> g = new ArrayList<List<Integer>>();
    static Integer f[];
    
    static int nim(int u) {
        if (g.get(u).size() == 0) return 0;
        if (f[u] != null) return f[u];
        
        Set<Integer> hash = new HashSet<Integer>();
        for (int v : g.get(u))
            hash.add(nim(v));
        
        for (int i=0; ; i++)
            if (!hash.contains(i)) {
                f[u] = i;
                break;
            }
        return f[u];
    }
    public static void main(String[] args) throws Exception {
        BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer str = new StringTokenizer(cin.readLine());
        n = Integer.parseInt(str.nextToken());
        m = Integer.parseInt(str.nextToken());
        for (int i=0; i < n; i++) 
            g.add(new ArrayList<Integer>());
        f = new Integer[n];
        for (int i=0; i < m; i++) {
            str = new StringTokenizer(cin.readLine());
            int u = Integer.parseInt(str.nextToken()) - 1;
            int v = Integer.parseInt(str.nextToken()) - 1;
            g.get(u).add(v);
        }
        
        for (int T=Integer.parseInt(cin.readLine()); T > 0; T--) {
            int k = Integer.parseInt(cin.readLine());
            str = new StringTokenizer(cin.readLine());
            int res = 0;
            for (int i=0; i < k; i++) {
                res ^= nim(Integer.parseInt(str.nextToken()) - 1);
            }
            if (res == 0) System.out.println("Iroh");
            else System.out.println("Bumi");
        }
        
        cin.close();
    }

}